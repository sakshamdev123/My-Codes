nosql - database -> collection -> data
sql - database -> tables -> data

show databases - view all databases
use <database_name> - selecting and creating new database

---------------------------------------------------------------CREATE----------------------------------------------------------------------------

db.<collection_name>.insertone(<data>) - inserting data in collection and creating new collection
db.<collection_name>.insertMany([<data>]) - inserting multiple data at once in the array

----------------------------------------------------------------READ-----------------------------------------------------------------------------

db.<collection_name>.find() - shows all data stored in a collection
db.<collection_name>.find(<filtering_criteria>) - shows all objects satisfying filtering criteria in an array
db.<collection_name>.findOne(<filtering_criteria>) - searches for first object satisfying filtering criteria
{property_name: {$<relational_operator>: "value"}} - filtering criteria
db.<collection_name>.find(<filtering_criteria_1>,<filtering_criteria_2>) - shows all properties of filtering_criteria_2 objects satisfying filtering_criteria_1 in an array
{property1_name: 0, property2_name: 1} - filtering_criteria_2 (1 - show, 0/notIncludingProperty - don't show) default show for "_id"
+-------------------------------------------+
|         relational_operators              |
+------------+------------------------------+
|    eq      |         equals to            |
|    gt      |       greater than           |
|    lt      |         less than            |
|    lte     |    less than equals to       |
|    gte     |   greater than equals to     |
+------------+------------------------------+
{$<logical_operator>:[filtering_criteria_1, filtering_criteria_2]} - filtering criteria
+---------------------------------------+
|         logical_operators             |
+-----------+---------------------------+
|    and    |      intersection         |
|    or     |         union             |
+-----------+---------------------------+
db.<collection_name>.countDocuments() - counts the number of objects
db.countDocuments(<filtering_criteria>) - counts the number of objects satisfying filtering criteria
db.<collection_name>.<any_function>.<cursor_function> - cursor function is applied to result of another function (eg - sort, limit)
db.<collection_name>.<any_function>.sort({"property_name": <1/-1>}) - sorts the result of the function with a property (1 - ascending order/ -1 - descending order)
db.<collection_name>.<any_function>.limit(number) - to fix number of result to be obtained

---------------------------------------------------------------UPDATE----------------------------------------------------------------------------

{$<atomic_operator>: {"property1_name": newValue1, "property2_name": newValue2}} - updating criteria and atomic operators - set
db.<collection_name>.updateOne(<filtering_criteria, <updating_criteria>) - updates first object's property specified matching filtering criteria if property_name is not a property of filtered object new property is added to the object with property name = property_name and value = newValue and if there is no filtered object then nothing will happen
db.<collection_name>.updateOne(<filtering_criteria>, <updating_criteria>, upsert:<boolean>) - if no filtered object found a new object is inserted with the properties of updating criteria otherwise update it normally (boolean - true/false) upsert = update + insert
db.<collection_name>.updateMany(<filtering_criteria>, <updating_criteria>) - updates all objects which fulfill filtering criteria
db.<collection_name>.replaceOne(<filtering_criteria>, {newObject}) - replaces first object fulfilling filtering criteria with a new object

---------------------------------------------------------------DELETE----------------------------------------------------------------------------
db.<collection_name>.deleteOne(<filtering_criteria>) - deletes first object matching filtering criteria
db.<collection_name>.deleteMany(<filtering_criteria>) - deletes all objects fulfilling the filtering criteria

{'_id': ObjectId('object_id')} - using _id property